{"version":3,"names":["React","PlatformConstants","createHandler","baseGestureHandlerProps","forceTouchGestureHandlerProps","ForceTouchFallback","Component","componentDidMount","console","warn","render","props","children","_defineProperty","ForceTouchGestureHandler","forceTouchAvailable","name","allowedProps","config"],"sources":["ForceTouchGestureHandler.ts"],"sourcesContent":["import React from 'react';\nimport PlatformConstants from '../PlatformConstants';\nimport createHandler from './createHandler';\nimport {\n  BaseGestureHandlerProps,\n  baseGestureHandlerProps,\n} from './gestureHandlerCommon';\n\nexport const forceTouchGestureHandlerProps = [\n  'minForce',\n  'maxForce',\n  'feedbackOnActivation',\n] as const;\n\nclass ForceTouchFallback extends React.Component {\n  static forceTouchAvailable = false;\n  componentDidMount() {\n    console.warn(\n      'ForceTouchGestureHandler is not available on this platform. Please use ForceTouchGestureHandler.forceTouchAvailable to conditionally render other components that would provide a fallback behavior specific to your usecase'\n    );\n  }\n  render() {\n    return this.props.children;\n  }\n}\n\nexport type ForceTouchGestureHandlerEventPayload = {\n  x: number;\n  y: number;\n  absoluteX: number;\n  absoluteY: number;\n\n  /**\n   * The pressure of a touch.\n   */\n  force: number;\n};\n\nexport interface ForceTouchGestureConfig {\n  /**\n   *\n   * A minimal pressure that is required before handler can activate. Should be a\n   * value from range `[0.0, 1.0]`. Default is `0.2`.\n   */\n  minForce?: number;\n\n  /**\n   * A maximal pressure that could be applied for handler. If the pressure is\n   * greater, handler fails. Should be a value from range `[0.0, 1.0]`.\n   */\n  maxForce?: number;\n\n  /**\n   * Boolean value defining if haptic feedback has to be performed on\n   * activation.\n   */\n  feedbackOnActivation?: boolean;\n}\n\nexport interface ForceTouchGestureHandlerProps\n  extends BaseGestureHandlerProps<ForceTouchGestureHandlerEventPayload>,\n    ForceTouchGestureConfig {}\n\nexport type ForceTouchGestureHandler = typeof ForceTouchGestureHandler & {\n  forceTouchAvailable: boolean;\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nexport const ForceTouchGestureHandler = PlatformConstants?.forceTouchAvailable\n  ? createHandler<\n      ForceTouchGestureHandlerProps,\n      ForceTouchGestureHandlerEventPayload\n    >({\n      name: 'ForceTouchGestureHandler',\n      allowedProps: [\n        ...baseGestureHandlerProps,\n        ...forceTouchGestureHandlerProps,\n      ] as const,\n      config: {},\n    })\n  : ForceTouchFallback;\n\n(ForceTouchGestureHandler as ForceTouchGestureHandler).forceTouchAvailable =\n  PlatformConstants?.forceTouchAvailable || false;\n"],"mappings":";;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,iBAAiB,MAAM,sBAAsB;AACpD,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,SAEEC,uBAAuB,QAClB,wBAAwB;AAE/B,OAAO,MAAMC,6BAA6B,GAAG,CAC3C,UAAU,EACV,UAAU,EACV,sBAAsB,CACd;AAEV,MAAMC,kBAAkB,SAASL,KAAK,CAACM,SAAS,CAAC;EAE/CC,iBAAiBA,CAAA,EAAG;IAClBC,OAAO,CAACC,IAAI,CACV,8NACF,CAAC;EACH;EACAC,MAAMA,CAAA,EAAG;IACP,OAAO,IAAI,CAACC,KAAK,CAACC,QAAQ;EAC5B;AACF;AAACC,eAAA,CAVKR,kBAAkB,yBACO,KAAK;AAmDpC;AACA,OAAO,MAAMS,wBAAwB,GAAGb,iBAAiB,aAAjBA,iBAAiB,eAAjBA,iBAAiB,CAAEc,mBAAmB,GAC1Eb,aAAa,CAGX;EACAc,IAAI,EAAE,0BAA0B;EAChCC,YAAY,EAAE,CACZ,GAAGd,uBAAuB,EAC1B,GAAGC,6BAA6B,CACxB;EACVc,MAAM,EAAE,CAAC;AACX,CAAC,CAAC,GACFb,kBAAkB;AAErBS,wBAAwB,CAA8BC,mBAAmB,GACxE,CAAAd,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEc,mBAAmB,KAAI,KAAK"}