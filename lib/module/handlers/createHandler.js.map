{"version":3,"names":["React","Platform","Touchable","UIManager","DeviceEventEmitter","deepEqual","RNGestureHandlerModule","State","handlerIDToTag","getNextHandlerTag","filterConfig","findNodeHandle","UIManagerAny","customGHEventsConfig","onGestureHandlerEvent","registrationName","onGestureHandlerStateChange","genericDirectEventTypes","UIManagerConstants","_UIManagerAny$getView","_UIManagerAny$getView2","getViewManagerConfig","call","_UIManagerAny$getCons","getConstants","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","__DEV__","OS","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","r","stateToPropMappings","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","showedRngh2Notice","showRngh2NoticeIfNeeded","console","warn","createHandler","_ref","name","allowedProps","config","transformProps","customNativeProps","Handler","Component","constructor","_defineProperty","event","nativeEvent","handlerTag","_this$props$onGesture","_this$props","onGestureEvent","_this$props$onGesture2","_this$props2","_this$props$onHandler","_this$props3","onHandlerStateChange","state","stateEventName","eventHandler","_this$props$onGesture3","_this$props4","node","viewNode","child","Children","only","children","ref","newConfig","createGestureHandler","newViewTag","viewTag","attachGestureHandler","propsRef","updateGestureHandler","createRef","id","Error","componentDidMount","inspectorToggleListener","setState","_","update","updateEnqueued","setImmediate","componentDidUpdate","componentWillUnmount","_this$inspectorToggle","remove","dropGestureHandler","clearImmediate","handlerID","setNativeProps","updates","mergedProps","render","gestureEventHandler","gestureStateEventHandler","events","grandChildren","TOUCH_TARGET_DEBUG","type","displayName","toArray","push","renderDebugView","color","hitSlop","cloneElement","refHandler","collapsable"],"sources":["createHandler.ts"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  Touchable,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'lodash/isEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\nimport { State } from '../State';\nimport { handlerIDToTag, getNextHandlerTag } from './handlersRegistry';\n\nimport {\n  BaseGestureHandlerProps,\n  filterConfig,\n  GestureEvent,\n  HandlerStateChangeEvent,\n  findNodeHandle,\n} from './gestureHandlerCommon';\nimport { ValueOf } from '../typeUtils';\n\nconst UIManagerAny = UIManager as any;\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\n  UIManagerAny.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<\n  HandlerPropsT extends Record<string, unknown>\n> = Readonly<{\n  name: string;\n  allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n  config: Readonly<Record<string, unknown>>;\n  transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n  customNativeProps?: Readonly<string[]>;\n}>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\nlet showedRngh2Notice = false;\nfunction showRngh2NoticeIfNeeded() {\n  if (!showedRngh2Notice) {\n    console.warn(\n      \"[react-native-gesture-handler] Seems like you're using an old API with gesture components, check out new Gestures system!\"\n    );\n    showedRngh2Notice = true;\n  }\n}\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private viewNode: any;\n    private viewTag?: number;\n    private updateEnqueued: ReturnType<typeof setImmediate> | null = null;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n      if (__DEV__) {\n        showRngh2NoticeIfNeeded();\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update();\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // setImmediate. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update();\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update();\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      if (this.updateEnqueued) {\n        clearImmediate(this.updateEnqueued);\n      }\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onGestureEvent?.(event);\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onHandlerStateChange?.(event);\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler)(\n          this.handlerTag,\n          newViewTag,\n          false,\n          this.propsRef\n        );\n      } else {\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          false\n        );\n      }\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n    };\n\n    private update() {\n      const newConfig = filterConfig(\n        transformProps ? transformProps(this.props) : this.props,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      if (!deepEqual(this.config, newConfig)) {\n        this.updateGestureHandler(newConfig);\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const {\n        onGestureEvent,\n        onGestureHandlerEvent,\n      }: OnGestureEventHandlers = this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      const child: any = React.Children.only(this.props.children);\n      let grandChildren = child.props.children;\n      if (\n        Touchable.TOUCH_TARGET_DEBUG &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop,\n          })\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"],"mappings":"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"}