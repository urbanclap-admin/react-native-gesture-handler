{"version":3,"names":["Hammer","findNodeHandle","State","EventMap","NodeManager","gestureInstances","GestureHandler","id","name","gestureInstance","isDiscrete","shouldEnableGestureOnSetup","Error","constructor","_defineProperty","UNDETERMINED","Array","isArray","config","waitFor","gesture","removePendingGesture","clearSelfAsPending","hammer","stop","destroy","_ref","x","y","rect","view","getBoundingClientRect","pointerInside","left","right","top","bottom","nativeEvent","onGestureHandlerEvent","onGestureHandlerStateChange","propsRef","current","event","transformEventData","invokeNullableMethod","lastSentState","state","get","enable","recognizer","inputData","enabled","isGestureRunning","hasGestureFailed","options","maxPointers","_stillWaiting","_getPendingGestures","length","hasCustomActivationCriteria","deltaRotation","initialRotation","rotation","success","failed","isGestureEnabledForEvent","getConfig","simulateCancelEvent","params","getHammerConfig","set","onWaitingEnded","_gesture","pendingGestures","addPendingGesture","_config","_recognizer","_event","NativeGestureClass","updateHasCustomActivationCriteria","updateGestureConfig","_ref2","props","ensureConfig","sync","getState","type","eventType","numberOfPointers","changedTouch","changedPointers","isPointInView","clientX","clientY","previousState","oldState","transformNativeEvent","handlerTag","target","ref","timeStamp","Date","now","cancelPendingGestures","Object","values","cancelEvent","notifyPendingGestures","onGestureEnded","forceInvalidate","sendEvent","INPUT_CANCEL","isFinal","onRawEvent","_ref3","isFirst","setView","Manager","add","on","ev","setTimeout","setupEvents","onStart","onGestureActivated","_ref4","deltaX","deltaY","__initialX","__initialY","onSuccess","stillWaiting","filter","_ref5","pointers","minPointers","_inputData","method","__getHandler","handler","argMapping","__nodeConfig","index","key","value","entries","nativeValue","setValue","minDist","minDistSq","minVelocity","minVelocitySq","maxDist","maxDistSq","asArray","map","_ref6","getHandler","v","configProps","forEach","prop","Number","NaN"],"sources":["GestureHandler.ts"],"sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\nimport { findNodeHandle } from 'react-native';\n\nimport { State } from '../State';\nimport { EventMap } from './constants';\nimport * as NodeManager from './NodeManager';\n\n// TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\nexport type HammerInputExt = Omit<HammerInput, 'destroy' | 'handler' | 'init'>;\n\nexport type Config = Partial<{\n  enabled: boolean;\n  minPointers: number;\n  maxPointers: number;\n  minDist: number;\n  minDistSq: number;\n  minVelocity: number;\n  minVelocitySq: number;\n  maxDist: number;\n  maxDistSq: number;\n  failOffsetXStart: number;\n  failOffsetYStart: number;\n  failOffsetXEnd: number;\n  failOffsetYEnd: number;\n  activeOffsetXStart: number;\n  activeOffsetXEnd: number;\n  activeOffsetYStart: number;\n  activeOffsetYEnd: number;\n  waitFor: any[] | null;\n}>;\n\ntype NativeEvent = ReturnType<GestureHandler['transformEventData']>;\n\nlet gestureInstances = 0;\n\nabstract class GestureHandler {\n  public handlerTag: any;\n  public isGestureRunning = false;\n  public view: number | null = null;\n  protected hasCustomActivationCriteria: boolean;\n  protected hasGestureFailed = false;\n  protected hammer: HammerManager | null = null;\n  protected initialRotation: number | null = null;\n  protected __initialX: any;\n  protected __initialY: any;\n  protected config: Config = {};\n  protected previousState: State = State.UNDETERMINED;\n  private pendingGestures: Record<string, this> = {};\n  private oldState: State = State.UNDETERMINED;\n  private lastSentState: State | null = null;\n  private gestureInstance: number;\n  private _stillWaiting: any;\n  private propsRef: any;\n  private ref: any;\n\n  abstract get name(): string;\n\n  get id() {\n    return `${this.name}${this.gestureInstance}`;\n  }\n\n  get isDiscrete() {\n    return false;\n  }\n\n  get shouldEnableGestureOnSetup(): boolean {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  constructor() {\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  onWaitingEnded(_gesture: this) {}\n\n  removePendingGesture(id: string) {\n    delete this.pendingGestures[id];\n  }\n\n  addPendingGesture(gesture: this) {\n    this.pendingGestures[gesture.id] = gesture;\n  }\n\n  isGestureEnabledForEvent(\n    _config: any,\n    _recognizer: any,\n    _event: any\n  ): { failed?: boolean; success?: boolean } {\n    return { success: true };\n  }\n\n  get NativeGestureClass(): RecognizerStatic {\n    throw new Error('Must override GestureHandler.NativeGestureClass');\n  }\n\n  updateHasCustomActivationCriteria(_config: Config) {\n    return true;\n  }\n\n  clearSelfAsPending = () => {\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.removePendingGesture(this.id);\n      }\n    }\n  };\n\n  updateGestureConfig({ enabled = true, ...props }) {\n    this.clearSelfAsPending();\n\n    this.config = ensureConfig({ enabled, ...props });\n    this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(\n      this.config\n    );\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.addPendingGesture(this);\n      }\n    }\n\n    if (this.hammer) {\n      this.sync();\n    }\n    return this.config;\n  }\n\n  destroy = () => {\n    this.clearSelfAsPending();\n\n    if (this.hammer) {\n      this.hammer.stop(false);\n      this.hammer.destroy();\n    }\n    this.hammer = null;\n  };\n\n  isPointInView = ({ x, y }: { x: number; y: number }) => {\n    // @ts-ignore FIXME(TS)\n    const rect = this.view!.getBoundingClientRect();\n    const pointerInside =\n      x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    return pointerInside;\n  };\n\n  getState(type: keyof typeof EventMap): State {\n    // @ts-ignore TODO(TS) check if this is needed\n    if (type == 0) {\n      return 0;\n    }\n    return EventMap[type];\n  }\n\n  transformEventData(event: HammerInputExt) {\n    const { eventType, maxPointers: numberOfPointers } = event;\n    // const direction = DirectionMap[ev.direction];\n    const changedTouch = event.changedPointers[0];\n    const pointerInside = this.isPointInView({\n      x: changedTouch.clientX,\n      y: changedTouch.clientY,\n    });\n\n    // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n    const state = this.getState(eventType as 1 | 2 | 4 | 8);\n    if (state !== this.previousState) {\n      this.oldState = this.previousState;\n      this.previousState = state;\n    }\n\n    return {\n      nativeEvent: {\n        numberOfPointers,\n        state,\n        pointerInside,\n        ...this.transformNativeEvent(event),\n        // onHandlerStateChange only\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        oldState: this.oldState,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  transformNativeEvent(_event: HammerInputExt) {\n    return {};\n  }\n\n  sendEvent = (nativeEvent: HammerInputExt) => {\n    const {\n      onGestureHandlerEvent,\n      onGestureHandlerStateChange,\n    } = this.propsRef.current;\n\n    const event = this.transformEventData(nativeEvent);\n\n    invokeNullableMethod(onGestureHandlerEvent, event);\n    if (this.lastSentState !== event.nativeEvent.state) {\n      this.lastSentState = event.nativeEvent.state as State;\n      invokeNullableMethod(onGestureHandlerStateChange, event);\n    }\n  };\n\n  cancelPendingGestures(event: HammerInputExt) {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture && gesture.isGestureRunning) {\n        gesture.hasGestureFailed = true;\n        gesture.cancelEvent(event);\n      }\n    }\n  }\n\n  notifyPendingGestures() {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture) {\n        gesture.onWaitingEnded(this);\n      }\n    }\n  }\n\n  // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n  onGestureEnded(event: HammerInputExt) {\n    this.isGestureRunning = false;\n    this.cancelPendingGestures(event);\n  }\n\n  forceInvalidate(event: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(event);\n    }\n  }\n\n  cancelEvent(event: HammerInputExt) {\n    this.notifyPendingGestures();\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_CANCEL,\n      isFinal: true,\n    });\n    this.onGestureEnded(event);\n  }\n\n  onRawEvent({ isFirst }: HammerInputExt) {\n    if (isFirst) {\n      this.hasGestureFailed = false;\n    }\n  }\n\n  setView(ref: Parameters<typeof findNodeHandle>['0'], propsRef: any) {\n    if (ref == null) {\n      this.destroy();\n      this.view = null;\n      return;\n    }\n\n    this.propsRef = propsRef;\n    this.ref = ref;\n\n    this.view = findNodeHandle(ref);\n    this.hammer = new Hammer.Manager(this.view as any);\n\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    const { NativeGestureClass } = this;\n    // @ts-ignore TODO(TS)\n    const gesture = new NativeGestureClass(this.getHammerConfig());\n    this.hammer.add(gesture);\n\n    this.hammer.on('hammer.input', (ev: HammerInput) => {\n      if (!this.config.enabled) {\n        this.hasGestureFailed = false;\n        this.isGestureRunning = false;\n        return;\n      }\n\n      this.onRawEvent((ev as unknown) as HammerInputExt);\n\n      // TODO: Bacon: Check against something other than null\n      // The isFirst value is not called when the first rotation is calculated.\n      if (this.initialRotation === null && ev.rotation !== 0) {\n        this.initialRotation = ev.rotation;\n      }\n      if (ev.isFinal) {\n        // in favor of a willFail otherwise the last frame of the gesture will be captured.\n        setTimeout(() => {\n          this.initialRotation = null;\n          this.hasGestureFailed = false;\n        });\n      }\n    });\n\n    this.setupEvents();\n    this.sync();\n  }\n\n  setupEvents() {\n    // TODO(TS) Hammer types aren't exactly that what we get in runtime\n    if (!this.isDiscrete) {\n      this.hammer!.on(`${this.name}start`, (event: HammerInput) =>\n        this.onStart((event as unknown) as HammerInputExt)\n      );\n      this.hammer!.on(\n        `${this.name}end ${this.name}cancel`,\n        (event: HammerInput) => {\n          this.onGestureEnded((event as unknown) as HammerInputExt);\n        }\n      );\n    }\n    this.hammer!.on(this.name, (ev: HammerInput) =>\n      this.onGestureActivated((ev as unknown) as HammerInputExt)\n    ); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n  }\n\n  onStart({ deltaX, deltaY, rotation }: HammerInputExt) {\n    // Reset the state for the next gesture\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    this.isGestureRunning = true;\n    this.__initialX = deltaX;\n    this.__initialY = deltaY;\n    this.initialRotation = rotation;\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    this.sendEvent(ev);\n  }\n\n  onSuccess() {}\n\n  _getPendingGestures() {\n    if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n      // Get the list of gestures that this gesture is still waiting for.\n      // Use `=== false` in case a ref that isn't a gesture handler is used.\n      const stillWaiting = this.config.waitFor.filter(\n        ({ hasGestureFailed }) => hasGestureFailed === false\n      );\n      return stillWaiting;\n    }\n    return [];\n  }\n\n  getHammerConfig() {\n    const pointers =\n      this.config.minPointers === this.config.maxPointers\n        ? this.config.minPointers\n        : 0;\n    return {\n      pointers,\n    };\n  }\n\n  sync = () => {\n    const gesture = this.hammer!.get(this.name);\n    if (!gesture) return;\n\n    const enable = (recognizer: any, inputData: any) => {\n      if (!this.config.enabled) {\n        this.isGestureRunning = false;\n        this.hasGestureFailed = false;\n        return false;\n      }\n\n      // Prevent events before the system is ready.\n      if (\n        !inputData ||\n        !recognizer.options ||\n        typeof inputData.maxPointers === 'undefined'\n      ) {\n        return this.shouldEnableGestureOnSetup;\n      }\n\n      if (this.hasGestureFailed) {\n        return false;\n      }\n\n      if (!this.isDiscrete) {\n        if (this.isGestureRunning) {\n          return true;\n        }\n        // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n        // Only process if there are views to wait for.\n        this._stillWaiting = this._getPendingGestures();\n        // This gesture should continue waiting.\n        if (this._stillWaiting.length) {\n          // Check to see if one of the gestures you're waiting for has started.\n          // If it has then the gesture should fail.\n          for (const gesture of this._stillWaiting) {\n            // When the target gesture has started, this gesture must force fail.\n            if (!gesture.isDiscrete && gesture.isGestureRunning) {\n              this.hasGestureFailed = true;\n              this.isGestureRunning = false;\n              return false;\n            }\n          }\n          // This gesture shouldn't start until the others have finished.\n          return false;\n        }\n      }\n\n      // Use default behaviour\n      if (!this.hasCustomActivationCriteria) {\n        return true;\n      }\n\n      const deltaRotation =\n        this.initialRotation == null\n          ? 0\n          : inputData.rotation - this.initialRotation;\n      // @ts-ignore FIXME(TS)\n      const { success, failed } = this.isGestureEnabledForEvent(\n        this.getConfig(),\n        recognizer,\n        {\n          ...inputData,\n          deltaRotation,\n        }\n      );\n\n      if (failed) {\n        this.simulateCancelEvent(inputData);\n        this.hasGestureFailed = true;\n      }\n      return success;\n    };\n\n    const params = this.getHammerConfig();\n    // @ts-ignore FIXME(TS)\n    gesture.set({ ...params, enable });\n  };\n\n  simulateCancelEvent(_inputData: any) {}\n}\n\n// TODO(TS) investigate this method\n// Used for sending data to a callback or AnimatedEvent\nfunction invokeNullableMethod(\n  method:\n    | ((event: NativeEvent) => void)\n    | { __getHandler: () => (event: NativeEvent) => void }\n    | { __nodeConfig: { argMapping: any } },\n  event: NativeEvent\n) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      // For use with reanimated's AnimatedEvent\n      if (\n        '__getHandler' in method &&\n        typeof method.__getHandler === 'function'\n      ) {\n        const handler = method.__getHandler();\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          const { argMapping } = method.__nodeConfig;\n          if (Array.isArray(argMapping)) {\n            for (const [index, [key, value]] of argMapping.entries()) {\n              if (key in event.nativeEvent) {\n                // @ts-ignore fix method type\n                const nativeValue = event.nativeEvent[key];\n                if (value && value.setValue) {\n                  // Reanimated API\n                  value.setValue(nativeValue);\n                } else {\n                  // RN Animated API\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n// Validate the props\nfunction ensureConfig(config: Config): Required<Config> {\n  const props = { ...config };\n\n  // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist! * props.minDist!;\n  }\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity! * props.minVelocity!;\n  }\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist! * config.maxDist!;\n  }\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor)\n      .map(({ handlerTag }: { handlerTag: number }) =>\n        NodeManager.getHandler(handlerTag)\n      )\n      .filter((v) => v);\n  } else {\n    props.waitFor = null;\n  }\n\n  const configProps = [\n    'minPointers',\n    'maxPointers',\n    'minDist',\n    'maxDist',\n    'maxDistSq',\n    'minVelocitySq',\n    'minDistSq',\n    'minVelocity',\n    'failOffsetXStart',\n    'failOffsetYStart',\n    'failOffsetXEnd',\n    'failOffsetYEnd',\n    'activeOffsetXStart',\n    'activeOffsetXEnd',\n    'activeOffsetYStart',\n    'activeOffsetYEnd',\n  ] as const;\n  configProps.forEach((prop: typeof configProps[number]) => {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props as Required<Config>; // TODO(TS) how to convince TS that props are filled?\n}\n\nfunction asArray<T>(value: T | T[]) {\n  // TODO(TS) use config.waitFor type\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;\n"],"mappings":"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"}