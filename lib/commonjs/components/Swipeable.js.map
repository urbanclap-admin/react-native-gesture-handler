{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_PanGestureHandler","_TapGestureHandler","_State","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_extends","assign","bind","target","i","arguments","length","source","apply","_defineProperty","value","_toPropertyKey","enumerable","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","TypeError","Number","DRAG_TOSS","Swipeable","Component","constructor","props","state","friction","overshootFriction","dragX","rowTranslation","leftWidth","rowWidth","rightOffset","rightWidth","Math","max","overshootLeft","overshootRight","transX","Animated","add","interpolate","inputRange","outputRange","showLeftAction","Value","leftActionTranslate","MIN_VALUE","extrapolate","showRightAction","rightActionTranslate","_ref","nativeEvent","oldState","State","ACTIVE","close","ev","handleRelease","velocityX","translationX","rowState","leftThreshold","rightThreshold","startOffsetX","currentOffset","toValue","animateRow","fromValue","setValue","setState","sign","spring","restSpeedThreshold","restDisplacementThreshold","velocity","bounciness","useNativeDriver","useNativeAnimations","animationOptions","start","_ref2","finished","onSwipeableLeftOpen","onSwipeableRightOpen","_this$props$onSwipeab","_this$props","onSwipeableClose","_this$props$onSwipeab2","_this$props2","onSwipeableOpen","onSwipeableLeftWillOpen","onSwipeableRightWillOpen","_this$props$onSwipeab3","_this$props3","onSwipeableWillClose","_this$props$onSwipeab4","_this$props4","onSwipeableWillOpen","_ref3","layout","width","updateAnimatedEvent","onGestureEvent","event","UNSAFE_componentWillUpdate","render","children","renderLeftActions","renderRightActions","left","createElement","View","style","styles","leftActions","transform","translateX","onLayout","_ref4","x","right","rightActions","_ref5","PanGestureHandler","activeOffsetX","onHandlerStateChange","onRowLayout","container","containerStyle","TapGestureHandler","enabled","onTapHandlerStateChange","pointerEvents","childrenContainerStyle","exports","StyleSheet","create","overflow","absoluteFillObject","flexDirection","I18nManager","isRTL"],"sources":["Swipeable.tsx"],"sourcesContent":["// Similarily to the DrawerLayout component this deserves to be put in a\n// separate repo. Although, keeping it here for the time being will allow us to\n// move faster and fix possible issues quicker\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  I18nManager,\n  LayoutChangeEvent,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from '../handlers/gestureHandlerCommon';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerEventPayload,\n  PanGestureHandlerProps,\n} from '../handlers/PanGestureHandler';\nimport {\n  TapGestureHandler,\n  TapGestureHandlerEventPayload,\n} from '../handlers/TapGestureHandler';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\ntype SwipeableExcludes = Exclude<\n  keyof PanGestureHandlerProps,\n  'onGestureEvent' | 'onHandlerStateChange'\n>;\n\nexport interface SwipeableProps\n  extends Pick<PanGestureHandlerProps, SwipeableExcludes> {\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance. e.g. value of 1 will indicate that the swipeable panel\n   * should exactly follow the gesture, 2 means it is going to be two times\n   * \"slower\".\n   */\n  friction?: number;\n\n  /**\n   * Distance from the left edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  leftThreshold?: number;\n\n  /**\n   * Distance from the right edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  rightThreshold?: number;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the left\n   * actions panel's width. It is set to true by default as long as the left\n   * panel render method is present.\n   */\n  overshootLeft?: boolean;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the\n   * right actions panel's width. It is set to true by default as long as the\n   * right panel render method is present.\n   */\n  overshootRight?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance at overshoot. Default value is 1, it mean no friction, for\n   * a native feel, try 8 or above.\n   */\n  overshootFriction?: number;\n\n  /**\n   * Called when left action panel gets open.\n   */\n  onSwipeableLeftOpen?: () => void;\n\n  /**\n   * Called when right action panel gets open.\n   */\n  onSwipeableRightOpen?: () => void;\n\n  /**\n   * Called when action panel gets open (either right or left).\n   */\n  onSwipeableOpen?: () => void;\n\n  /**\n   * Called when action panel is closed.\n   */\n  onSwipeableClose?: () => void;\n\n  /**\n   * Called when left action panel starts animating on open.\n   */\n  onSwipeableLeftWillOpen?: () => void;\n\n  /**\n   * Called when right action panel starts animating on open.\n   */\n  onSwipeableRightWillOpen?: () => void;\n\n  /**\n   * Called when action panel starts animating on open (either right or left).\n   */\n  onSwipeableWillOpen?: () => void;\n\n  /**\n   * Called when action panel starts animating on close.\n   */\n  onSwipeableWillClose?: () => void;\n\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1] dragAnimatedValue: [0, +]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderLeftActions?: (\n    progressAnimatedValue: Animated.AnimatedInterpolation,\n    dragAnimatedValue: Animated.AnimatedInterpolation\n  ) => React.ReactNode;\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1] dragAnimatedValue: [0, -]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderRightActions?: (\n    progressAnimatedValue: Animated.AnimatedInterpolation,\n    dragAnimatedValue: Animated.AnimatedInterpolation\n  ) => React.ReactNode;\n\n  useNativeAnimations?: boolean;\n\n  animationOptions?: Record<string, unknown>;\n\n  /**\n   * Style object for the container (`Animated.View`), for example to override\n   * `overflow: 'hidden'`.\n   */\n  containerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Style object for the children container (`Animated.View`), for example to\n   * apply `flex: 1`\n   */\n  childrenContainerStyle?: StyleProp<ViewStyle>;\n}\n\ntype SwipeableState = {\n  dragX: Animated.Value;\n  rowTranslation: Animated.Value;\n  rowState: number;\n  leftWidth?: number;\n  rightOffset?: number;\n  rowWidth?: number;\n};\n\nexport default class Swipeable extends Component<\n  SwipeableProps,\n  SwipeableState\n> {\n  static defaultProps = {\n    friction: 1,\n    overshootFriction: 1,\n    useNativeAnimations: true,\n  };\n\n  constructor(props: SwipeableProps) {\n    super(props);\n    const dragX = new Animated.Value(0);\n    this.state = {\n      dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined,\n    };\n    this.updateAnimatedEvent(props, this.state);\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragX } }],\n      { useNativeDriver: props.useNativeAnimations! }\n    );\n  }\n\n  UNSAFE_componentWillUpdate(props: SwipeableProps, state: SwipeableState) {\n    if (\n      this.props.friction !== props.friction ||\n      this.props.overshootLeft !== props.overshootLeft ||\n      this.props.overshootRight !== props.overshootRight ||\n      this.props.overshootFriction !== props.overshootFriction ||\n      this.state.leftWidth !== state.leftWidth ||\n      this.state.rightOffset !== state.rightOffset ||\n      this.state.rowWidth !== state.rowWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n  }\n\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private transX?: Animated.AnimatedInterpolation;\n  private showLeftAction?: Animated.AnimatedInterpolation | Animated.Value;\n  private leftActionTranslate?: Animated.AnimatedInterpolation;\n  private showRightAction?: Animated.AnimatedInterpolation | Animated.Value;\n  private rightActionTranslate?: Animated.AnimatedInterpolation;\n\n  private updateAnimatedEvent = (\n    props: SwipeableProps,\n    state: SwipeableState\n  ) => {\n    const { friction, overshootFriction } = props;\n    const { dragX, rowTranslation, leftWidth = 0, rowWidth = 0 } = state;\n    const { rightOffset = rowWidth } = state;\n    const rightWidth = Math.max(0, rowWidth - rightOffset);\n\n    const {\n      overshootLeft = leftWidth > 0,\n      overshootRight = rightWidth > 0,\n    } = props;\n\n    const transX = Animated.add(\n      rowTranslation,\n      dragX.interpolate({\n        inputRange: [0, friction!],\n        outputRange: [0, 1],\n      })\n    ).interpolate({\n      inputRange: [-rightWidth - 1, -rightWidth, leftWidth, leftWidth + 1],\n      outputRange: [\n        -rightWidth - (overshootRight ? 1 / overshootFriction! : 0),\n        -rightWidth,\n        leftWidth,\n        leftWidth + (overshootLeft ? 1 / overshootFriction! : 0),\n      ],\n    });\n    this.transX = transX;\n    this.showLeftAction =\n      leftWidth > 0\n        ? transX.interpolate({\n            inputRange: [-1, 0, leftWidth],\n            outputRange: [0, 0, 1],\n          })\n        : new Animated.Value(0);\n    this.leftActionTranslate = this.showLeftAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n    this.showRightAction =\n      rightWidth > 0\n        ? transX.interpolate({\n            inputRange: [-rightWidth, 0, 1],\n            outputRange: [1, 0, 0],\n          })\n        : new Animated.Value(0);\n    this.rightActionTranslate = this.showRightAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.close();\n    }\n  };\n\n  private onHandlerStateChange = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    if (ev.nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease(ev);\n    }\n  };\n\n  private handleRelease = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    const { velocityX, translationX: dragX } = ev.nativeEvent;\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    const {\n      friction,\n      leftThreshold = leftWidth / 2,\n      rightThreshold = rightWidth / 2,\n    } = this.props;\n\n    const startOffsetX = this.currentOffset() + dragX / friction!;\n    const translationX = (dragX + DRAG_TOSS * velocityX) / friction!;\n\n    let toValue = 0;\n    if (rowState === 0) {\n      if (translationX > leftThreshold) {\n        toValue = leftWidth;\n      } else if (translationX < -rightThreshold) {\n        toValue = -rightWidth;\n      }\n    } else if (rowState === 1) {\n      // swiped to left\n      if (translationX > -leftThreshold) {\n        toValue = leftWidth;\n      }\n    } else {\n      // swiped to right\n      if (translationX < rightThreshold) {\n        toValue = -rightWidth;\n      }\n    }\n\n    this.animateRow(startOffsetX, toValue, velocityX / friction!);\n  };\n\n  private animateRow = (\n    fromValue: number,\n    toValue: number,\n    velocityX?:\n      | number\n      | {\n          x: number;\n          y: number;\n        }\n  ) => {\n    const { dragX, rowTranslation } = this.state;\n    dragX.setValue(0);\n    rowTranslation.setValue(fromValue);\n\n    this.setState({ rowState: Math.sign(toValue) });\n    Animated.spring(rowTranslation, {\n      restSpeedThreshold: 1.7,\n      restDisplacementThreshold: 0.4,\n      velocity: velocityX,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      ...this.props.animationOptions,\n    }).start(({ finished }) => {\n      if (finished) {\n        if (toValue > 0 && this.props.onSwipeableLeftOpen) {\n          this.props.onSwipeableLeftOpen();\n        } else if (toValue < 0 && this.props.onSwipeableRightOpen) {\n          this.props.onSwipeableRightOpen();\n        }\n\n        if (toValue === 0) {\n          this.props.onSwipeableClose?.();\n        } else {\n          this.props.onSwipeableOpen?.();\n        }\n      }\n    });\n    if (toValue > 0 && this.props.onSwipeableLeftWillOpen) {\n      this.props.onSwipeableLeftWillOpen();\n    } else if (toValue < 0 && this.props.onSwipeableRightWillOpen) {\n      this.props.onSwipeableRightWillOpen();\n    }\n\n    if (toValue === 0) {\n      this.props.onSwipeableWillClose?.();\n    } else {\n      this.props.onSwipeableWillOpen?.();\n    }\n  };\n\n  private onRowLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ rowWidth: nativeEvent.layout.width });\n  };\n\n  private currentOffset = () => {\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    if (rowState === 1) {\n      return leftWidth;\n    } else if (rowState === -1) {\n      return -rightWidth;\n    }\n    return 0;\n  };\n\n  close = () => {\n    this.animateRow(this.currentOffset(), 0);\n  };\n\n  openLeft = () => {\n    const { leftWidth = 0 } = this.state;\n    this.animateRow(this.currentOffset(), leftWidth);\n  };\n\n  openRight = () => {\n    const { rowWidth = 0 } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    this.animateRow(this.currentOffset(), -rightWidth);\n  };\n\n  render() {\n    const { rowState } = this.state;\n    const { children, renderLeftActions, renderRightActions } = this.props;\n\n    const left = renderLeftActions && (\n      <Animated.View\n        style={[\n          styles.leftActions,\n          // all those and below parameters can have ! since they are all\n          // asigned in constructor in `updateAnimatedEvent` but TS cannot spot\n          // it for some reason\n          { transform: [{ translateX: this.leftActionTranslate! }] },\n        ]}>\n        {renderLeftActions(this.showLeftAction!, this.transX!)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ leftWidth: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    const right = renderRightActions && (\n      <Animated.View\n        style={[\n          styles.rightActions,\n          { transform: [{ translateX: this.rightActionTranslate! }] },\n        ]}>\n        {renderRightActions(this.showRightAction!, this.transX!)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ rightOffset: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    return (\n      <PanGestureHandler\n        activeOffsetX={[-10, 10]}\n        {...this.props}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.onHandlerStateChange}>\n        <Animated.View\n          onLayout={this.onRowLayout}\n          style={[styles.container, this.props.containerStyle]}>\n          {left}\n          {right}\n          <TapGestureHandler\n            enabled={rowState !== 0}\n            onHandlerStateChange={this.onTapHandlerStateChange}>\n            <Animated.View\n              pointerEvents={rowState === 0 ? 'auto' : 'box-only'}\n              style={[\n                {\n                  transform: [{ translateX: this.transX! }],\n                },\n                this.props.childrenContainerStyle,\n              ]}>\n              {children}\n            </Animated.View>\n          </TapGestureHandler>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n  },\n  leftActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',\n  },\n  rightActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse',\n  },\n});\n"],"mappings":"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"}