{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_isEqual","_interopRequireDefault","_RNGestureHandlerModule","_State","_handlersRegistry","_gestureHandlerCommon","_UIManagerAny$getView","_UIManagerAny$getView2","_UIManagerAny$getCons","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_defineProperty","value","_toPropertyKey","enumerable","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","TypeError","Number","UIManagerAny","UIManager","customGHEventsConfig","onGestureHandlerEvent","registrationName","onGestureHandlerStateChange","genericDirectEventTypes","UIManagerConstants","getViewManagerConfig","getConstants","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","RNGestureHandlerModule","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","__DEV__","Platform","OS","DeviceEventEmitter","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","r","stateToPropMappings","State","UNDETERMINED","BEGAN","FAILED","CANCELLED","ACTIVE","END","showedRngh2Notice","showRngh2NoticeIfNeeded","console","warn","createHandler","_ref","name","allowedProps","config","transformProps","customNativeProps","Handler","Component","constructor","event","nativeEvent","handlerTag","_this$props$onGesture","_this$props","onGestureEvent","_this$props$onGesture2","_this$props2","_this$props$onHandler","_this$props3","onHandlerStateChange","state","stateEventName","eventHandler","_this$props$onGesture3","_this$props4","node","viewNode","child","Children","only","children","ref","newConfig","createGestureHandler","newViewTag","viewTag","attachGestureHandler","propsRef","updateGestureHandler","getNextHandlerTag","createRef","id","handlerIDToTag","Error","componentDidMount","inspectorToggleListener","setState","_","update","updateEnqueued","setImmediate","filterConfig","findNodeHandle","componentDidUpdate","componentWillUnmount","_this$inspectorToggle","remove","dropGestureHandler","clearImmediate","handlerID","deepEqual","setNativeProps","updates","mergedProps","render","gestureEventHandler","gestureStateEventHandler","events","grandChildren","Touchable","TOUCH_TARGET_DEBUG","type","displayName","toArray","push","renderDebugView","color","hitSlop","cloneElement","refHandler","collapsable"],"sources":["createHandler.ts"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  Touchable,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'lodash/isEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\nimport { State } from '../State';\nimport { handlerIDToTag, getNextHandlerTag } from './handlersRegistry';\n\nimport {\n  BaseGestureHandlerProps,\n  filterConfig,\n  GestureEvent,\n  HandlerStateChangeEvent,\n  findNodeHandle,\n} from './gestureHandlerCommon';\nimport { ValueOf } from '../typeUtils';\n\nconst UIManagerAny = UIManager as any;\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\n  UIManagerAny.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<\n  HandlerPropsT extends Record<string, unknown>\n> = Readonly<{\n  name: string;\n  allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n  config: Readonly<Record<string, unknown>>;\n  transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n  customNativeProps?: Readonly<string[]>;\n}>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\nlet showedRngh2Notice = false;\nfunction showRngh2NoticeIfNeeded() {\n  if (!showedRngh2Notice) {\n    console.warn(\n      \"[react-native-gesture-handler] Seems like you're using an old API with gesture components, check out new Gestures system!\"\n    );\n    showedRngh2Notice = true;\n  }\n}\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private viewNode: any;\n    private viewTag?: number;\n    private updateEnqueued: ReturnType<typeof setImmediate> | null = null;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n      if (__DEV__) {\n        showRngh2NoticeIfNeeded();\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update();\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // setImmediate. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update();\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update();\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      if (this.updateEnqueued) {\n        clearImmediate(this.updateEnqueued);\n      }\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onGestureEvent?.(event);\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onHandlerStateChange?.(event);\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler)(\n          this.handlerTag,\n          newViewTag,\n          false,\n          this.propsRef\n        );\n      } else {\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          false\n        );\n      }\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n    };\n\n    private update() {\n      const newConfig = filterConfig(\n        transformProps ? transformProps(this.props) : this.props,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      if (!deepEqual(this.config, newConfig)) {\n        this.updateGestureHandler(newConfig);\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const {\n        onGestureEvent,\n        onGestureHandlerEvent,\n      }: OnGestureEventHandlers = this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      const child: any = React.Children.only(this.props.children);\n      let grandChildren = child.props.children;\n      if (\n        Touchable.TOUCH_TARGET_DEBUG &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop,\n          })\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"],"mappings":"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"}